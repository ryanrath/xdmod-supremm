version: 2.1
executors:
  centos7: &centos7-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-job_performance-9.5.0:centos7.9-0.1
  centos8: &centos8-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-job_performance-10.0.0:centos8.4-0.1
  rocky8: &rocky8-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-job_performance-10.0.0:rockylinux8-0.1
jobs:
  build:
    parameters:
      os:
        type: executor
      install-type:
        type: string
    executor: << parameters.os >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,supremm,jobefficiency'
      XDMOD_IS_CORE: 'yes'
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_SRC_DIR:  ./../xdmod
      REG_TEST_BASE: /../../../../../project/tests/artifacts/regression/current
    steps:
      - checkout
      - run:
          name: Checkout XDMoD
          command: |
            git clone --depth=1 --branch=xdmod10.0 https://github.com/ubccr/xdmod.git $XDMOD_SRC_DIR
      - run:
          name: Link the SUPREMM module into the XDMoD Source Directory
          command: |
              ln -s `pwd` $XDMOD_SRC_DIR/open_xdmod/modules/supremm
      - when:
          condition:
              or:
                  - equal: [ *rocky8-executor, << parameters.os >> ]
                  - equal: [ *centos8-executor, << parameters.os >> ]
          steps:
            - run:
               name: Remove composer lock files
               command: rm -f "$XDMOD_SRC_DIR/composer.lock" && rm -f composer.lock
            - run:
               name: Update XDMoD's composer config.platform
               command: |
                   sed -i 's/"php": "5.4"/"php": "7.2"/' $XDMOD_SRC_DIR/composer.json
            - run:
               name: Move composer.json so we can modify it
               command: |
                   mv "${XDMOD_SRC_DIR}/composer.json" "${XDMOD_SRC_DIR}/composer.json.orig"
            - run:
               name: Update XDMoD's config to trust addons
               command: |
                   jq '.config += {"allow-plugins": {"composer/installers": true, "simplesamlphp/composer-module-installer": true}}' "$XDMOD_SRC_DIR/composer.json.orig" > "$XDMOD_SRC_DIR/composer.json"
            - run:
               name: Add mongodb/mongodb to XDMoD via composer
               command: composer require -d "$XDMOD_SRC_DIR" mongodb/mongodb
            - run:
               name: Install XDMoD UI Test Dependencices
               command: |
                 pushd "$XDMOD_SRC_DIR/tests/ui" || exit
                 npm install
                 popd || exit

      # We need to update our acct before we can enable docker layer caching.
      #- setup_remote_docker:
      #    docker_layer_caching: true
      # Download and cache dependencies
      - run:
          name: temporarily toast composer.lock
          command: rm -f composer.lock
      - run:
          name: Install SUPREMM Dependencies
          command: |
            composer install --no-progress
      - when:
          condition:
              equal: [ *centos7-executor, << parameters.os >> ]
          steps:
            - run:
                name: Install SUPREMM RPM build dependencies
                command: |
                  ./tests/ci/scripts/install_dependencies.sh
      - run:
          name: Install XDMoD Dependencies
          command: |
            composer config -g cache-files-ttl 315360000
            composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Create Test Artifact Directories
          command: |
            mkdir -p /tmp/phpunit
            mkdir -p /tmp/screenshots
      - run:
          name: Setup Environment Variables
          command: |
            echo "export XDMOD_SOURCE_DIR=${CIRCLE_WORKING_DIRECTORY}/${XDMOD_SRC_DIR}" >> $BASH_ENV
            echo "export SHIPPABLE_BUILD_DIR=${CIRCLE_WORKING_DIRECTORY}" >> $BASH_ENV
      - run:
          name: Build RPMS
          command: |
            pushd $XDMOD_SRC_DIR
            ~/bin/buildrpm xdmod supremm
            popd
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: |
              ./tests/integration_tests/scripts/bootstrap.sh
      - run:
          name: Validate the newly installed / Upgraded XDMoD
          command: ./tests/integration_tests/scripts/validate.sh
      - run:
          name: Make sure that the Composer Test Dependencies are installed
          command: composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Setup & Run QA Tests
          command: ./tests/ci/scripts/qa-test-setup.sh
      - run:
          name: Make sure that the Composer Test Dependencies are installed
          command: composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Updating XDMOD_INSTALL_DIR env variable
          command: echo "export XDMOD_INSTALL_DIR=/usr/share/xdmod" >> $BASH_ENV
      - run:
          name: Run Post Install Tests
          command: ./tests/ci/scripts/post-install-test.sh
      - run:
          name: Run Integration Tests
          command: ./tests/integration_tests/runtests.sh --log-junit ~/phpunit
      - when:
          condition:
              equal: [ *centos7-executor, << parameters.os >> ]
          steps:
              - run:
                  name: Run UI Tests
                  command: scl enable rh-nodejs6 "$XDMOD_SRC_DIR/tests/ui/runtests.sh --headless --log-junit ~/phpunit"
      - when:
          condition:
              or:
                - equal: [ *rocky8-executor, << parameters.os >> ]
                - equal: [ *centos8-executor, << parameters.os >> ]
          steps:
              - run:
                  name: Run UI Tests
                  command: "$XDMOD_SRC_DIR/tests/ui/runtests.sh --headless --log-junit ~/phpunit"
      - run:
          name: Run Regression Tests
          command: ./tests/regression_tests/runtests.sh --log-junit ~/phpunit
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /var/log/xdmod
      - store_test_results:
          path: /tmp/phpunit

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [centos7, rocky8, centos8]
              install-type: ["fresh_install", "upgrade"]
            exclude:
              - os: rocky8
                install-type: "upgrade"
              - os: centos8
                install-type: "upgrade"
